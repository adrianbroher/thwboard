<?php

function build_string($m)
{
  $str = "";

  for($i = 0; $i <= 21; $i++)
    {
      $str .= (($m & (1 << $i)) ? 1 : 0);
    }

  return $str;
}

class CUpdate
{
    var        $UpdaterVer        = 1.1;
    var        $OldVersion        = '2.81';
    var        $NewVersion        = '2.82';
    var        $Prefix            = '';
    var        $Error            = '';
    var        $Author            = 'ThWboard Development Team';
    var        $Date            = '';
    var        $Notes            = '';
    private $pdo = null;

    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
        // this is a little hack so that we always get the correct date.

        $this->Date = preg_replace('/^\$'.'Date: ([0-9]{4})\/([0-9]{2})\/([0-9]{2}) [0-9]{2}:[0-9]{2}:[0-9]{2} \$$/', '\3.\2.\1', '$Date: 2004-11-07 01:19:15 +0100 (Sun, 07 Nov 2004) $');
    }

    function AllowUpdate()
    {
        $stmt = $this->pdo->query(
<<<SQL
SELECT
    keyvalue
FROM
    {$this->Prefix}registry
WHERE
    keyname = 'version'
SQL
        );

        $version = $stmt->fetch(PDO::FETCH_COLUMN, 0);

        return ($version == $this->OldVersion);
    }

    function SetError($errmsg)
    {
        $this->Error = $errmsg;
    }

    function GetError()
    {
        return $this->Error;
    }

    /*
     * RETURN VALUE
     *    1 - update failed (set error with $this->SetError() )
     *    0 - update sucessfull
     */
    function RunUpdate()
    {
        $pref = $this->Prefix;

        $this->pdo->exec(
<<<SQL
ALTER TABLE
    {$pref}user
MODIFY COLUMN
    userinterests TINYTEXT NOT NULL,
ADD COLUMN
    useractivate TINYINT(1) UNSIGNED NOT NULL DEFAULT 0 AFTER usernodelete
SQL
        );

        $this->pdo->exec(
<<<SQL
ALTER TABLE
    {$pref}online
ADD COLUMN
    sessionid VARCHAR(32) DEFAULT '' NOT NULL FIRST,
ADD INDEX
    sessionid (sessionid),
DROP COLUMN
    onlineid,
ENGINE = Heap
SQL
        );

        $this->pdo->exec(
<<<SQL
ALTER TABLE
    {$pref}group
MODIFY COLUMN
    accessmask VARCHAR(50) DEFAULT '' NOT NULL
SQL
        );

        $this->pdo->exec(
<<<SQL
ALTER TABLE
    {$pref}groupboard
MODIFY COLUMN
    accessmask VARCHAR(50) DEFAULT '' NOT NULL
SQL
        );

        $this->pdo->exec(
<<<SQL
CREATE TABLE
    {$pref}statcache
(
    stat_id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
    stat_stime INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_etime INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_uid INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_month VARCHAR(64) NOT NULL DEFAULT '',
    stat_auser INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_nuser INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_nthread INT(11) UNSIGNED NOT NULL DEFAULT 0,
    stat_npost INT(11) UNSIGNED NOT NULL DEFAULT 0,
    PRIMARY KEY (stat_id),
    KEY stat_stime (stat_stime, stat_etime),
    KEY stat_month (stat_month),
    KEY stat_uid (stat_uid)
) ENGINE = MyISAM
SQL
        );

        $this->pdo->exec(
<<<SQL
INSERT INTO
    {$pref}registry
VALUES
    ('session_timeout', '1800', 'integer', 'Session timeout', 'Time for sessions to expire.', 3, 13)
SQL
        );

        $masks = $this->pdo->query(
<<<SQL
SELECT
    groupid,
    accessmask
FROM
    {$pref}group
ORDER BY
    groupid ASC
SQL
        )->fetchAll();

        foreach ($masks as $mask) {
            $stmt = $this->pdo->prepare(
<<<SQL
UPDATE
    {$pref}group
SET
    accessmask = :accessmask
WHERE
    groupid = :groupid
SQL
            );

            $stmt->bindValue(':accessmask', build_string($mask['accessmask']), PDO::PARAM_STR);
            $stmt->bindValue(':groupid', $mask['groupid'], PDO::PARAM_INT);
            $stmt->execute();
        }

        $masks = $this->pdo->query(
<<<SQL
SELECT
    boardid,
    groupid,
    accessmask
FROM
    {$pref}groupboard
ORDER BY
    groupid ASC
SQL
        )->fetchAll();

        foreach ($masks as $mask) {
            $stmt = $this->pdo->prepare(
<<<SQL
UPDATE
    {$pref}groupboard
SET
    accessmask = :accessmask,
WHERE
    groupid = :groupid AND
    boardid = :boardid
SQL
            );

            $stmt->bindValue(':accessmask', build_string($mask['accessmask']), PDO::PARAM_STR);
            $stmt->bindValue(':groupid', $mask['groupid'], PDO::PARAM_INT);
            $stmt->bindValue(':boardid', $mask['boardid'], PDO::PARAM_INT);
            $stmt->execute();
        }

        $posts = $this->pdo->query(
<<<SQL
SELECT
    postid,
    posttext
FROM
    {$pref}post
WHERE
    posttext LIKE '%[QUOTE]%' OR
    posttext LIKE '%[/QUOTE]%'
SQL
        )->fetchAll();

        foreach ($posts as $post) {
            $post['posttext'] = preg_replace("/\[(\/|)QUOTE\]/", "[$1quote]", $post['posttext']);

            $stmt = $this->pdo->prepare(
<<<SQL
UPDATE
    {$pref}post
SET
    posttext = :posttext
WHERE
    postid = :postid
SQL
            );

            $stmt->bindValue(':posttext', $post['posttext'], PDO::PARAM_STR);
            $stmt->bindValue(':postid', $post['postid'], PDO::PARAM_INT);
            $stmt->execute();
        }

        $stmt = $this->pdo->prepare(
<<<SQL
UPDATE
    {$pref}registry
SET
    keyvalue = :version
WHERE
    keyname = 'version'
SQL
        );

        $stmt->bindValue(':version', $this->NewVersion, PDO::PARAM_STR);
        $stmt->execute();

        return 0;
    }
}
