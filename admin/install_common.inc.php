<?php
/**
 * ThWboard - PHP/MySQL Bulletin Board System
 * ==========================================
 *
 * Copyright (C) 2000-2006 by ThWboard Development Group
 * Copyright (C) 2015 by Marcel Metz
 *
 * This file is part of ThWboard
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program;  If not, see <http://www.gnu.org/licenses/>.
 */

require __DIR__.'/install_lang.php';
require __DIR__.'/../vendor/autoload.php';

$template = new \League\Plates\Engine(__DIR__.'/../templates/builtin/html');
$template->registerFunction('_', 'lng');

error_reporting(0); // E_ERROR | E_WARNING | E_PARSE

function create_tables(PDO $pdo, $delete_existing)
{
    static $migrations = [];

    if (empty($migrations)) {
        $migrations[] = include 'updates/ThWboardMigration.0.php';
        $migrations[] = include 'updates/ThWboardMigration.1.php';
        $migrations[] = include 'updates/ThWboardMigration.2.php';
        $migrations[] = include 'updates/ThWboardMigration.3.php';
        $migrations[] = include 'updates/ThWboardMigration.4.php';
        $migrations[] = include 'updates/ThWboardMigration.5.php';
    };

    if ($delete_existing) {
        foreach (array_reverse($migrations) as $migration) {
            $migration->downgrade($pdo);
        }
    }

    foreach ($migrations as $migration) {
        $migration->upgrade($pdo);
    }
}

function WriteAccess($file)
{
    $fp = @fopen($file, 'w');

    if (!$fp) {
        return false;
    } else {
        fclose($fp);

        return true;
    }
}

/**
 * Checks if a table exists
 *
 * @param PDO $pdo A database connection. This connection needs to have
 *   a database selected.
 * @param string $table The name of the table, which should exist.
 */
function table_exists(PDO $pdo, $table)
{
    $stmt = $pdo->prepare(
<<<SQL
SELECT
    *
FROM
    INFORMATION_SCHEMA.TABLES
WHERE
    TABLE_SCHEMA = DATABASE() AND
    TABLE_NAME = :tablename
SQL
    );

    $stmt->bindValue(':tablename', $table, PDO::PARAM_STR);
    $stmt->execute();

    return $stmt->fetch(PDO::FETCH_COLUMN, 0);
}

/**
 * Checks if a column in the given table exists
 *
 * @param PDO $pdo A database connection. This connection needs to have
 *   a database selected.
 * @param string $table The name of the table, which should contain the
 *   given column.
 * @param string $column The name of the column, that should exists
 *   within the given table.
 */
function column_exists(PDO $pdo, $table, $column)
{
    $stmt = $pdo->prepare(
<<<SQL
SELECT
    *
FROM
    INFORMATION_SCHEMA.COLUMNS
WHERE
    TABLE_SCHEMA = DATABASE() AND
    TABLE_NAME = :tablename AND
    COLUMN_NAME = :columnname
SQL
    );

    $stmt->bindValue(':tablename', $table, PDO::PARAM_STR);
    $stmt->bindValue(':columnname', $column, PDO::PARAM_STR);
    $stmt->execute();

    return (0 != $stmt->rowCount());
}

function schema_version(PDO $pdo)
{
    $stmt = $pdo->query(
<<<SQL
SELECT
    keyvalue
FROM
    {$pdo->prefix}registry
WHERE
    keyname = 'version'
SQL
    );

    return $stmt->fetch(PDO::FETCH_COLUMN, 0);
}

function install_allowed()
{
    if (file_exists('../inc/config.inc.php')) {
        return 0;
    } else {
        return 1;
    }
}

/**
 * Write a configuration file to the given stream
 *
 * @param resource $stream An open writable file stream.
 * @param array $configuration An associative array containing the
 *   configuration of the board. The following keys are required and
 *   supported:
 *   - database-hostname: The host name where the database resides on.
 *   - database-username: The user name to connect to the database.
 *   - database-password: The password to connect to the database.
 *   - database-name: The name of the database/schema where the tables
 *     reside in.
 *   - table-prefix: An prefix, that is added to every table of this
 *     board installation.
 */
function p_configuration($stream, $configuration)
{
    fwrite($stream, <<<CONFIG
<?php
/* This file has been generated by the ThWboard installer.
 *
 * If you have downloaded it from the ThWboard installer, you need to
 * place it inside the 'inc/' directory of the ThWboard installation.
 * If you want to reinstall the ThWboard, you need to delete this file.
 */
\$mysql_h    = "{$configuration['database-hostname']}";
\$mysql_u    = "{$configuration['database-username']}";
\$mysql_p    = "{$configuration['database-password']}";
\$mysql_db   = "{$configuration['database-name']}";
\$pref       = "{$configuration['table-prefix']}";
\$inst_lock  = true;

CONFIG
    );
}

function p_errormsg($title, $message, $back_url = null)
{
    global $template;

    echo $template->render('install-error', [
        'about_handler' => 'install.php?step=about',
        'back_url' => $back_url,
        'language' => $_SESSION['lang'],
        'message' => $message,
        'title' => $title
    ]);
}
